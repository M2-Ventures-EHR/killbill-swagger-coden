import org.killbill.billing.client.KillBillObject;

public class {{classname}} extends KillBillObject {

    {{#vars}}
      {{#isEnum}}
      {{^isContainer}}
    {{>modelInnerEnum}}
      {{/isContainer}}
      {{/isEnum}}
      {{#items.isEnum}}
        {{#items}}
        {{^isContainer}}
    {{>modelInnerEnum}}
        {{/isContainer}}
        {{/items}}
      {{/items.isEnum}}
    {{#jackson}}
    @JsonProperty("{{baseName}}")
    {{#withXml}}
      {{^isContainer}}
    @JacksonXmlProperty({{#isXmlAttribute}}isAttribute = true, {{/isXmlAttribute}}{{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/isContainer}}
      {{#isContainer}}
        {{#isXmlWrapped}}
    // items.xmlName={{items.xmlName}}
    @JacksonXmlElementWrapper(useWrapping = {{isXmlWrapped}}, {{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#items.xmlName}}{{items.xmlName}}{{/items.xmlName}}{{^items.xmlName}}{{items.baseName}}{{/items.xmlName}}")
        {{/isXmlWrapped}}
      {{/isContainer}}
    {{/withXml}}
    {{/jackson}}
    {{#withXml}}
    {{#isXmlAttribute}}
    @XmlAttribute(name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
    {{/isXmlAttribute}}
    {{^isXmlAttribute}}
      {{^isContainer}}
    @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/isContainer}}
      {{#isContainer}}
    // Is a container wrapped={{isXmlWrapped}}
        {{#items}}
    // items.name={{name}} items.baseName={{baseName}} items.xmlName={{xmlName}} items.xmlNamespace={{xmlNamespace}}
    // items.example={{example}} items.type={{datatype}}
    @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
        {{/items}}
        {{#isXmlWrapped}}
    @XmlElementWrapper({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
        {{/isXmlWrapped}}
      {{/isContainer}}
    {{/isXmlAttribute}}
    {{/withXml}}
    {{#gson}}
    @SerializedName("{{baseName}}")
    {{/gson}}
    {{#isContainer}}
    private {{{datatypeWithEnum}}} {{name}}{{#required}} = {{{defaultValue}}}{{/required}}{{^required}} = null{{/required}};
    {{/isContainer}}
    {{^isContainer}}
    private {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
    {{/isContainer}}

    {{/vars}}
    {{#gson}}
    {{#discriminator}}
    public {{classname}}() {
        this.{{discriminator}} = this.getClass().getSimpleName();
    }
    {{/discriminator}}
    {{/gson}}
    {{#vars}}
    {{^isReadOnly}}
    public {{classname}} {{name}}({{{datatypeWithEnum}}} {{name}}) {
        this.{{name}} = {{name}};
        return this;
    }
    {{#isListContainer}}

    public {{classname}} add{{nameInCamelCase}}Item({{{items.datatypeWithEnum}}} {{name}}Item) {
        {{^required}}
        if (this.{{name}} == null) {
            this.{{name}} = {{{defaultValue}}};
        }
        {{/required}}
        this.{{name}}.add({{name}}Item);
        return this;
    }
    {{/isListContainer}}
    {{#isMapContainer}}

    public {{classname}} put{{nameInCamelCase}}Item(String key, {{{items.datatypeWithEnum}}} {{name}}Item) {
        {{^required}}
        if (this.{{name}} == null) {
            this.{{name}} = {{{defaultValue}}};
        }
        {{/required}}
        this.{{name}}.put(key, {{name}}Item);
        return this;
    }
    {{/isMapContainer}}

    {{/isReadOnly}}
    {{#useBeanValidation}}{{>beanValidation}}{{/useBeanValidation}}
    {{#vendorExtensions.extraAnnotation}}
    {{{vendorExtensions.extraAnnotation}}}
    {{/vendorExtensions.extraAnnotation}}
    public {{{datatypeWithEnum}}} {{#isBoolean}}is{{/isBoolean}}{{getter}}() {
        return {{name}};
    }
    {{^isReadOnly}}

    public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
        this.{{name}} = {{name}};
    }
    {{/isReadOnly}}

    {{/vars}}

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }{{#hasVars}}
        {{classname}} {{classVarName}} = ({{classname}}) o;
        return {{#vars}}{{#isByteArray}}Arrays{{/isByteArray}}{{#isBinary}}Arrays{{/isBinary}}{{^isByteArray}}{{^isBinary}}Objects{{/isBinary}}{{/isByteArray}}.equals(this.{{name}}, {{classVarName}}.{{name}}){{#hasMore}} &&
        {{/hasMore}}{{/vars}}{{#parent}} &&
        super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
        return {{#parent}}super.equals(o){{/parent}}{{^parent}}true{{/parent}};{{/hasVars}}
    }

    @Override
    public int hashCode() {
        return Objects.hash({{#vars}}{{^isByteArray}}{{^isBinary}}{{name}}{{/isBinary}}{{/isByteArray}}{{#isByteArray}}Arrays.hashCode({{name}}){{/isByteArray}}{{#isBinary}}Arrays.hashCode({{name}}){{/isBinary}}{{#hasMore}}, {{/hasMore}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}});
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class {{classname}} {\n");
        {{#parent}}sb.append("    ").append(toIndentedString(super.toString())).append("\n");{{/parent}}
        {{#vars}}sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
        {{/vars}}sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
